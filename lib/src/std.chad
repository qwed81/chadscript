pub enum Opt[T]
  void None
  T Some

pub enum Res[T]
  T Ok
  char[] Err

pub struct Range
  int start
  int end

pub next(Range& range) int?
  int thisIndex = range.start
  if range.start == range.end
    return None
  range.start += 1
  return thisIndex

pub rev(Range range) RangeReverse
  return { start = range.end - 1, end = range.start - 1 }

pub struct RangeReverse
  int start
  int end

pub next(RangeReverse& range) int?
  int thisIndex = range.start
  if range.start == range.end
    return None
  range.start -= 1
  return thisIndex

pub enum MathOperator
  void add
  void sub
  void mul
  void div

pub unsafeFree(T[] t)
  include
    _t->_refCount = NULL;
    free(_t->_ptr);

pub exit(int code)
  include
    exit(*_code);

# fix later
pub panic(char[] message)
  print(message)
  exit(-1)

pub terminateStr(char[] input) char[]
  char[] zeroTerminated = arr(input.len + 1)
  for i 0:input.len
    zeroTerminated[i] = input[i]
  zeroTerminated[input.len] = '\0'
  include
    _zeroTerminated._len -= 1;

  return zeroTerminated

pub print(T val, char[](T) s=toStr)
  char[] result = terminateStr(s(val))
  include
    printf("%s\n", _result._start);

pub input() char[&]! nextLine
  char[] errorMessage = "could not get line"
  char[&] buf = arr(1024)
  int len = 0
  include
    if (fgets(_buf._start, _buf._len, stdin) == NULL) {
      return ($(char[&]!)) { .tag = 1, ._Err = _errorMessage };
    }
    _len = strlen(_buf._start);

  return buf[0:len]

pub input() int! parsedInt
  int output = 0
  include
    scanf("%ld", &_output);
    
  return Ok(output)

pub input() bool! parsedBool
  return Err("not implemented")

pub input() num! parsedFloat
  return Err("not implemented")


pub arr(int len) T[&]
  include
    size_t size = (*_len) * sizeof($(T)) + sizeof(int64_t);
    void* alloc = malloc(size);
    memset(alloc, 0, size);
    $(T)* typedAlloc = ($(T)*)alloc;

    int64_t* refCount = (int64_t*)(typedAlloc + *_len);
    *refCount = 1;

    $(T[&]) slice = { ._ptr = alloc, ._start = alloc, ._len = *_len, ._refCount = refCount };
    ret = slice;
    goto cleanup;

  return arr(len)

pub toArr(List[T] list) T[&]
  return clone(list.arr)

pub asArr(List[T]& list) T[&]
  return list.arr[0:list.len]

pub view(List[T] list) T[]
  return list.arr[0:list.len]

pub eq(T[] a, T[] b, bool(T, T) e=eq) bool
  if a.len != b.len
    return false
  for i 0:a.len
    if !e(a[i], b[i])
      return false
  return true

pub clone(T[] toClone) T[&]
  T[&] newArr = arr(toClone.len)
  for i 0:toClone.len
    newArr[i] = toClone[i]
  return newArr

pub reverse(T[&] arr)
  for i 0:arr.len / 2
    T hold = arr[arr.len - 1 - i]
    arr[arr.len - 1 - i] = arr[i]
    arr[i] = hold

pub indexOf(T[] arr, T val, bool(T, T) e=eq) int? maybeIndex
  int? index = None
  for i 0:arr.len
    if e(arr[i], val)
      index = i
      break
  return index

pub lastIndexOf(T[] arr, T val, bool(T, T) e=eq) int? maybeIndex
  int? index = None
  for i rev(0:arr.len)
    if e(arr[i], val)
      index = i
      break
  return index

pub startsWith(T[] arr, T[] other, bool(T, T) e=eq) bool
  if arr.len < other.len
    return false
  for i 0:other.len
    if !e(arr[i], other[i])
      return false
  return true

pub endsWith(T[] arr, T[] other, bool(T, T) e=eq) bool
  if arr.len < other.len
    return false
  for i 0:other.len
    if !e(arr[arr.len - other.len - 1], other[i])
      return false
  return true

pub joinPath(char[] start, char[] end) char[]
  return "{start}/{end}" 

pub fileName(char[] path) char[]
  int? index = lastIndexOf(path, '/')
  if index is None
    return path
  return path[index.Some + 1:path.len]

pub fileNameWithoutExtension(char[] path) char[]
  char[] name = fileName(path)
  int? index = lastIndexOf(name, '.')
  if index is None
    return name
  return name[0:index]

pub fileExtension(char[] path) char[]
  int? index = lastIndexOf(path, '.')
  if index is None
    return ""
  return path[index.Some + 1:path.len]

pub toStr(T[] arr, char[](T) tToStr=toStr) char[]
  # some serious voodoo to perform the correct operation
  # on either strings or regular arrays
  include
    bool isChar = _Generic(&_arr->_start[0], char*: true, default: false);
    if (isChar) {
      if (_arr->_refCount != NULL) {
        *_arr->_refCount += 1;
      }
      ret = *(($(char*)*)_arr);
      goto cleanup;
    }

  StrBuf buf = strBuf()
  append(buf, '[')
  for i 0:arr.len
    append(buf, arr[i], tToStr=tToStr)
    if i != arr.len - 1
      append(buf, ',')
      append(buf, ' ')
  append(buf, ']')
  
  return toStr(buf)

pub split(char[] str) char[][]
  return split(str, ' ')

pub split(char[] str, char token) char[][]
  StrBuf buf = strBuf()
  List[char[]] output = list()
  for i 0:str.len
    if str[i] == token && buf.len != 0
      add(output, toStr(buf))
      buf = strBuf()
    else
      append(buf, str[i])

  add(output, toStr(buf))
  return view(output)

pub struct StrBuf
  List[char] backingList
  get int len

pub strBuf() StrBuf
  return { backingList = list(), len = 0 }

pub view(StrBuf buf) char[]
  return view(buf.backingList)

pub append(StrBuf& buf, T val, char[](T) tToStr=toStr)
  char[] newStr = tToStr(val)
  for i 0:newStr.len
    add(buf.backingList, newStr[i])
    buf.len += 1

pub toStr(StrBuf buf) char[]
  char[] newStr = view(buf.backingList)
  return newStr[0:buf.len]

pub struct List[T]
  T[&] arr
  get int len

pub list() List[T]
  return { arr = arr(4), len = 0 }

pub list(int capacity) List[T]
  return { arr = arr(capacity), len = 0 }

pub prepareIndex(List[T]& list, int index, T val) T*
  return list.arr[index:index + 1]

pub getIndex(List[T]& list, int index) T*
  return list.arr[index:index + 1]

pub toList(T[] toClone) List[T]
  T[&] newArr = clone(toClone)
  return { arr = newArr, len = toClone.len }

pub clone(List[T] toClone) List[T]
  T[&] newArr = clone(toClone.arr)
  return { arr = newArr, len = toClone.len }

pub add(List[T]& list, T val)
  if list.len == list.arr.len
    T[&] newAlloc = arr(list.len * 2)
    for i 0:list.arr.len
      newAlloc[i] = list.arr[i]
    list.arr = newAlloc

  list[list.len] = val
  list.len += 1

pub remove(List[T]& list, int index) T removedElement
  T output = list[index]
  for i index:list.len - 1
    list[i] = list[i + 1]
  return output

pub reverse(List[T]& list)
  reverse(list.arr[0:list.len])

pub toStr(List[T] list, char[](T) tToStr=toStr) char[]
  return toStr(list.arr[0:list.len], tToStr=tToStr)

struct Entry[K, V]
  K key
  V val

pub struct Map[K, V]
  int(int, K) hashKey
  bool(K, K) keyEq
  Entry[K, V]?[&] entries
  get int len
  
pub map(int(int, K) hashKey=hash, bool(K, K) keyEq=eq) Map[K, V]
  return { entries = arr(16), hashKey = hashKey, keyEq = keyEq, len = 0 }

indexOf(Map[K, V]& map, K key) int
  int hash = map.hashKey(0, key)
  int index = hash % map.entries.len

  # because the map will never be full this loop will always terminate
  while true
    if map.entries[index] is None || map.keyEq(map.entries[index].key, key)
      return index

    index += 1
    if index == map.entries.len
      index = 0

  return -1

resizeMap(Map[K, V]& map)
  # create a new map which is double the array size to insert elements into
  Entry[K, V]?[&] newEntries = arr(map.entries.len * 2)

  # reinsert all of the keys from the old map into the new map
  for i 0:map.entries.len
    Entry[K, V]? entry = map.entries[i]
    if entry is Some
      int newIndex = map.hashKey(0, entry.key)
      newIndex = newIndex % newEntries.len
      newEntries[newIndex] = { key = entry.key, val = entry.val }

  # set back the original maps keys and values
  map.entries = newEntries

outputEntry(Map[K, V]& map, int entryIndex) V*
  # return the referece to the values array
  include
    $(V) *outputPtr = &_map->_entries._start[*_entryIndex]._Some._val;
    $(V*) _output = ($(V*)){ ._ptr = outputPtr, ._start = outputPtr, ._len = 1, ._refCount = NULL };
    ret = _output;
    goto cleanup;

  return []

# sets up the value for setting an index, but does not actually set it
# only called when assigning to an indexed variable
pub prepareIndex(Map[K, V]& map, K key, V val) V*
  int index = indexOf(map, key)
  if map.entries[index] is None
    map.len += 1

    # if the map is 80% full
    if toNum(map.len) / toNum(map.entries.len) >= 0.8
      resizeMap(map)
    map.entries[index] = { key = key, val = val }
  return outputEntry(map, index)

pub getIndex(Map[K, V]& map, K key) V*
  int index = indexOf(map, key)
  if map.entries[index] is None
    panic("invalid access in map")

  return outputEntry(map, index)

pub contains(Map[K, V] map, K key) bool
  int index = indexOf(map, key)
  if map.entries[index] is None 
    return false
  return true

pub toStr(Map[K, V] map, char[](K) kToStr=toStr, char[](V) vToStr=toStr) char[]
  if map.len == 0
    return "[]"

  StrBuf output = strBuf()
  append(output, "[")

  bool first = true
  for i 0:map.entries.len
    Entry[K, V]? entry = map.entries[i]
    if entry is None
      continue

    if !first
      append(output, ", ")
    first = false

    append(output, kToStr(entry.key))
    append(output, "=")
    append(output, vToStr(entry.val))

  append(output, "]")
  return toStr(output)

pub toStr(T? val, char[](T) tToStr=toStr) char[]
  if val is Some
    return "Some({tToStr(val)})"
  else
    return "None"

pub toStr(int val) char[]
  int len
  include
    _len = snprintf(NULL, 0, "%ld", *_val);

  char[&] output = arr(len + 1)
  include
    snprintf(_output._start, _len + 1, "%ld", *_val);
  return output[0:output.len - 1]

pub toStr(num val) char[]
  int len
  include
    _len = snprintf(NULL, 0, "%f", *_val);

  char[&] output = arr(len + 1)
  include
    snprintf(_output._start, _len + 1, "%f", *_val);
  return output[0:output.len - 1]

pub toStr(bool val) char[]
  if val == true
    return "true"
  return "false"

pub toStr(char val) char[]
  return [val]

pub toNum(int val) num
  include
    return (double)*_val;
  return 0.0
  
pub eq(int a, int b) bool
  return a == b

pub eq(char a, char b) bool
  return a == b

pub toInt(byte val) int
  include
    return (int)*_val
  return 0

pub toInt(char val) int
  include
    return (int)*_val;
  return 0

pub toInt(num val) int
  include
    return (int)*_val;
  return 0

pub toChar(byte val) char
  include
    return (char)*_val;
  return '\0'

pub toChar(int val) char
  include
    return (char)*_val;
  return '\0'

pub toByte(char val) byte
  include
    return (unsigned char)*_val;
  return toByte(0)

pub toByte(int val) byte
  include
    return (unsigned char)*_val;
  return toByte(0)

pub asChars(byte[] buf) char[]
  include
    if (_buf->_refCount != NULL) {
      *_buf->_refCount += 1;
    }
    return *(($(char[])*)_buf);
  return asChars([])

pub asBytes(char[] str) byte[]
  include
    if (_str->_refCount != NULL) {
      *_str->_refCount += 1;
    }
    return *(($(byte[])*)_str);
  return asBytes("")

pub startGreenFn(void(T) routine, T args)
  include
    size_t size = sizeof($(T));
    $(T)* item = malloc(size);
    *item = *_args;
    startGreenFn((void*)_routine, item, true);

pub startThread(void(T) routine, T args)
  include
    size_t size = sizeof($(T));
    $(T)* item = malloc(size);
    *item = *_args;
    startThread((void*)_routine, item);

uv_err(int code) T!
  char[] errMessage = arr(1024)
  T! err = Err(errMessage)
  include
    uv_err_name_r(*_code, _errMessage._start, 1024);

  return err

pub enum FileType
  void File
  void Dir
  void Other

pub struct DirEntry
  get FileType type 
  get char[] name

pub readDir(char[] path) DirEntry[]!
  int numEntries = 0
  int result
  include
    ReadDirResult dirResult = readDir(_path->_start);
    _numEntries = dirResult.len;
    _result = dirResult.result;
  if result < 0 && result != -4095 # EOF
    return uv_err(result)

  DirEntry[&] entries = arr(numEntries) 
  for i 0:numEntries
    int index = i
    int strLen
    include
      const char* filePath = dirResult.files[_index].name;
      _strLen = strlen(filePath);

    char[] name = arr(strLen)
    FileType fileType = File
    include
      // copy the path into name
      memcpy(_name._start, filePath, _strLen);

      // set the fileType
      if (dirResult.files[_index].type == UV_DIRENT_FILE) {
        _fileType.tag = 0;
      }
      else if (dirResult.files[_index].type == UV_DIRENT_DIR) {
        _fileType.tag = 1;
      }
      else {
        _fileType.tag = 2;
      }

    entries[i] = { type = fileType, name = name }

  return Ok(entries)

pub enum FileFlags
  void Read
  void ReadWrite

pub struct File
  int handle
  int refCountPtr

# so that files can be closed automatically
unsafeChangeRefCount(File& file, int amt)
  include
    if (_file->_refCountPtr == 0) {
      goto cleanup;
    }

    int* refCount = (int*)_file->_refCountPtr;
    *refCount += 1;
    if (*refCount == 0) {
      closeFile(_file->_handle);
      free((void*)_file->_refCountPtr);
      _file->_refCountPtr = 0;
    }

pub open(char[] path, FileFlags flags, bool createIfMissing=false) File!
  int fileHandle = -1
  int intFlags = 0
  int intMode
  include
    _intMode = S_IRUSR | S_IWUSR;

  if flags is Read
    include
      _intFlags = UV_FS_O_RDONLY;
  elif flags is ReadWrite
    include
      _intFlags = UV_FS_O_RDWR;

  if createIfMissing
    include
      _intFlags |= UV_FS_O_CREAT;

  char[] cPath = terminateStr(path)
  include
    _fileHandle = openFile(_cPath._start, _intFlags, _intMode);
  if fileHandle < 0
    return uv_err(fileHandle)

  int refCountPtr
  include
    int64_t* ptr = malloc(sizeof(int64_t));
    *ptr = 1;
    _refCountPtr = (int64_t)ptr;

  return { handle = fileHandle, refCountPtr = refCountPtr }

pub close(File& file)
  include
    if (_file->_refCountPtr == 0) {
      goto cleanup;
    }
    _file->_refCountPtr = 0;

    closeFile(_file->_handle);
    free((void*)_file->_refCountPtr);
    _file->_refCountPtr = 0;

pub read(File& file, byte[&] buf, int position=-1) int! amtRead
  int result
  include
    _result = readFile(_file->_handle, _buf->_start, _buf->_len, *_position);
  if result < 0
    return uv_err(result)
  return result

pub write(File& file, byte[] bytes, int position=-1) void!
  int result
  include
    _result = writeFile(_file->_handle, _bytes->_start, _bytes->_len, *_position);
  if result < 0
    return uv_err(result)

  return Ok

pub struct TcpSocket
  int handle
  int refCountPtr

# so that sockets can be closed automatically
unsafeChangeRefCount(TcpSocket& socket, int amt)
  include
    if (_socket->_refCountPtr == 0) {
      goto cleanup;
    }

    int64_t* refCount = (int64_t*)_socket->_refCountPtr;
    *refCount += *_amt;
    if (*refCount == 0) {
      closeTcp((TcpHandle)_socket->_handle);
      free((void*)_socket->_refCountPtr);
      _socket->_refCountPtr = 0;
    }

struct TcpConnectionArgs[T]
  T args
  void!(TcpSocket, T) handler

tcpListenStart(int handle, TcpConnectionArgs[T] args)
  int streamHandle
  include
    _streamHandle = (int64_t)_handle;

  TcpSocket socket = { handle = streamHandle, refCountPtr = 0 }
  void! result = args.handler(socket, args.args)

  # let me close the socket
  include
    int64_t* refCount = malloc(sizeof(int64_t));
    *refCount = 0;
    _socket._refCountPtr = (int64_t)refCount;
  close(socket)

pub listen(char[] host, int port, T args, void!(TcpSocket&, T) handler) void!
  char[] cHost = terminateStr(host)
  void(int, TcpConnectionArgs[T]) start = tcpListenStart
  int result
  include
    size_t size = sizeof($(TcpConnectionArgs[T]));
    $(TcpConnectionArgs[T])* item = malloc(size);
    item->_args = *_args;
    item->_handler = *_handler;

    _result = listenTcp(_cHost._start, *_port, item, (void*)_start);
    free(item);
  if result < 0
    return uv_err(result)

  return Ok

pub connect(char[] host, int port) TcpSocket!
  char[] cHost = terminateStr(host)
  int result
  int outHandle

  include
    _result = connectTcp(_cHost._start, *_port, (TcpHandle*)&_outHandle);
  if result < 0
    return uv_err(result)

  int refCountPtr
  include
    int64_t* ptr = malloc(sizeof(int64_t));
    *ptr = 1;
    _refCountPtr = (int64_t)ptr;
  
  return { handle = outHandle, refCountPtr = refCountPtr }

pub read(TcpSocket& socket, byte[&] buf) int!
  int result
  include
    _result = readTcp((void*)_socket->_handle, _buf->_start, _buf->_len);
  if result < 0
    return uv_err(result)
  return result

pub write(TcpSocket& socket, byte[] bytes) void!
  int result
  include
    _result = writeTcp((void*)_socket->_handle, _bytes->_start, _bytes->_len);
  if result < 0
    return uv_err(result)
  return Ok

pub close(TcpSocket& socket)
  include
    if (_socket->_refCountPtr == 0) {
      goto cleanup;
    }
    closeTcp((TcpHandle)_socket->_handle);
    free((void*)_socket->_refCountPtr);
    _socket->_refCountPtr = 0;

pub struct Pipe
  int handle
  int refCountPtr

# so that pipes can be closed automatically
unsafeChangeRefCount(Pipe& pipe, int amt)
  include
    if (_pipe->_refCountPtr == 0) {
      goto cleanup;
    }

    int64_t* refCount = (int64_t*)_pipe->_refCountPtr;
    *refCount += *_amt;
    if (*refCount == 0) {
      closePipe((PipeHandle)_pipe->_handle);
      free((void*)_pipe->_refCountPtr);
      _pipe->_refCountPtr = 0;
    }

pub read(Pipe pipe, byte[&] buf) int!
  int result
  include
    _result = readPipe((void*)_pipe->_handle, _buf->_start, _buf->_len);
  if result < 0
    return uv_err(result)
  return result

pub write(Pipe pipe, byte[] bytes) void!
  int result
  include
    _result = writePipe((void*)_pipe->_handle, _bytes->_start, _bytes->_len);
  if result < 0
    return uv_err(result)
  return Ok

pub close(Pipe pipe) void
  include
    if (_pipe->_refCountPtr == 0) {
      goto cleanup;
    }
    // closePipe((PipeHandle)_pipe->_handle);
    free((void*)_pipe->_refCountPtr);
    _pipe->_refCountPtr = 0;

pub struct Process
  int waitHandle
  get Pipe stdout
  get Pipe stdin
  get Pipe stderr

pub exec(char[] command) Process!
  int result
  char[][] splits = split(command, ' ')
  Process child

  include
    char** args = malloc((_splits._len + 1) * sizeof(char*));
    for (int i = 0; i < _splits._len; i++) {
      size_t strLen = _splits._start[i]._len;
      args[i] = malloc((strLen + 1) * sizeof(char));
      memcpy(args[i], _splits._start[i]._start, strLen * sizeof(char));
      args[i][strLen] = '\0';
    }
    args[_splits._len] = NULL;
    ChildResult childResult = runProgram(args);
    _result = childResult.result;

    int64_t* stdoutRefCount = malloc(sizeof(int64_t));
    *stdoutRefCount = 1;

    int64_t* stdinRefCount = malloc(sizeof(int64_t));
    *stdinRefCount = 1;

    int64_t* stderrRefCount = malloc(sizeof(int64_t));
    *stderrRefCount = 1;

    _child._waitHandle = (int64_t)childResult.waitHandle;

    _child._stdout = ($(Pipe)) { ._handle = (int64_t)childResult.stdoutHandle, ._refCountPtr = (int64_t)stdoutRefCount };
    _child._stdin = ($(Pipe)) { ._handle = (int64_t)childResult.stdinHandle, ._refCountPtr = (int64_t)stdinRefCount };
    _child._stderr = ($(Pipe)) { ._handle = (int64_t)childResult.stderrHandle, ._refCountPtr = (int64_t)stderrRefCount };

    for (int i = 0; i < _splits._len; i++) {
      free(args[i]);
    }
    free(args);

  if result < 0
    return Err("could not run program")

  return child

pub wait(Process child) int exitCode
  int exitCode
  include
    _exitCode = waitProgram((struct ProgramWaitState*)_child->_waitHandle);
  return exitCode

