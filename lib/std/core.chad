pub fn or(int a, int b) int
  include
    return a | b;
  return a

pub enum opt[T]
  void None
  T Some

pub enum res[T]
  T Ok
  str Err

pub struct range
  int start
  int end

pub fn next(ln range r) int?
  int thisIndex = r.start
  if r.start == r.end
    return None
  r.start += 1
  return thisIndex

pub fn rev(range r) revRange
  return { start = r.end - 1, end = r.start - 1 }

pub struct revRange
  int start
  int end

pub fn next(ln revRange r) int?
  int thisIndex = r.start
  if r.start == r.end
    return None
  r.start -= 1
  return thisIndex

pub fn alloc(int amt) ptr[T]
  ptr[T] output
  include
    _output = malloc(sizeof($(T)) * *_amt);
  return output

pub fn null() ptr[T]
  include
    return NULL;
  return null()

pub fn ptrCast(ptr[S] input) ptr[E]
  include
    return ($(ptr[E]))(*_input);
  return ptrCast(input)

pub struct Arr[T]
  get ptr[T] base
  get int capacity
  get int len

pub fn arr() Arr[T]
  return { base = alloc(4), capacity = 4, len = 0 }

pub fn arr(int amt) Arr[T]
  return { base = alloc(amt), capacity = amt, len = amt }

pub fn str(Arr[T] l, str(T) strImpl=str) str
  Fmt buf = fmt()
  buf += "["
  for i in 0:l.len
    buf += strImpl(l[i])
    if i != l.len - 1
      buf += ','
  buf += ']'
  return str(buf)

pub fn prepareIndex(ln Arr[T] l, int index, T val) ptr[T]
  assert index >= 0 && index < l.len
  return ptr(l.base[index])

pub fn getIndex(ln Arr[T] l, int index) ptr[T]
  assert index >= 0 && index < l.len
  return ptr(l.base[index])

pub fn getIndex(ln Arr[T] l, range r) ptr[Arr[T]]
  assert r.start >= 0 && r.end <= l.len
  ptr[Arr[T]] newList = alloc(1)
  int len = r.end - r.start
  newList[0] = { base = ptr(l.base[r.start]), capacity = len, len = len }
  return newList

pub fn append(ln Arr[T] l, T val)
  if l.len == l.capacity
    ptr[T] newAlloc = alloc(l.capacity * 2)

    for i in 0:l.len
      newAlloc[i] = l.base[i]
    l.base = newAlloc
    l.capacity = l.capacity * 2

  l.base[l.len] = val
  l.len += 1

pub fn append(ln Arr[T] to, Arr[T] from)
  for i in 0:from.len
    to += from[i]

pub struct str
  get ptr[char] base
  get int len

pub fn str(str s) str
  return s

pub fn eq(str a, str b) bool
  if a.len != b.len
    return false
  for i in 0:a.len
    if a[i] != b[i]
      return false
  return true

pub fn getIndex(ln str s, int index) ptr[char]
  assert index >= 0 && index < s.len
  return ptr(s.base[index])

pub fn getIndex(ln str s, range r) ptr[str]
  assert r.start >= 0 && r.end <= s.len
  ptr[str] newStr = alloc(1)
  int len = r.end - r.start
  newStr[0] = { base = ptr(s.base[r.start]), len = len }
  return newStr

pub fn cstr(str s) ptr[char]
  ptr[char] cstr = alloc(s.len + 1)
  for i in 0:s.len
    cstr[i] = s[i]
  return cstr

pub fn split(str s) Arr[str]
  return split(s, ' ')

pub fn split(str s, char c) Arr[str]
  Arr[str] output = []
  int end = 0
  int start = 0
  while true
    if end >= s.len 
      break
    if s[end] == c
      output += s[start:end]
      start = end + 1
    end += 1
  output += s[start:s.len]
  return output

pub fn trim(str s) str
  return ""

pub fn contains(str s, str inner) bool
  return false

pub fn startsWith(str s, str start) bool
  return false

pub fn endsWith(str s, str end) bool
  return false

pub fn indexOf(str s, str inner) int?
  return None

pub fn lastIndexOf(str s, str inner) int?
  return None

pub struct Fmt
  get ptr[char] base
  get int capacity
  get int len

pub fn fmt() Fmt
  return { base = alloc(8), capacity = 8, len = 0 }

pub fn fmt(int size) Fmt
  return { base = alloc(size), capacity = size, len = size }

pub fn clone(Fmt buf) Fmt
  ptr[char] newBase = alloc(buf.len)
  for i in 0:buf.len
    newBase[i] = buf[i]
  return { base = newBase, capacity = buf.len, len = buf.len }

pub fn fromUtf8(Arr[byte] bytes) Fmt
  Fmt buf = fmt(bytes.len)
  for i in 0:bytes.len
    buf[i] = char(bytes[i])
  return buf

pub fn toUtf8(Fmt buf) Arr[byte]
  Arr[byte] bytes = arr(buf.len)
  for i in 0:buf.len
    bytes[i] = byte(buf[i])
  return bytes

pub fn fmt(str start) Fmt
  Fmt buf = fmt()
  append(buf, start)
  return buf

pub fn str(Fmt buf) str
  return { base = buf.base, len = buf.len }

fn appendOne(ln Fmt s, char c)
  if s.len == s.capacity
    ptr[char] newAlloc = alloc(s.capacity * 2)

    for i in 0:s.len
      newAlloc[i] = s.base[i]
    s.base = newAlloc
    s.capacity = s.capacity * 2

  s.base[s.len] = c
  s.len += 1

pub fn append(ln Fmt s, T val, str(T) strImpl=str)
  str valAsStr = strImpl(val)
  for i in 0:valAsStr.len
    appendOne(s, valAsStr[i])
  
pub fn prepareIndex(Fmt s, int index, T val) ptr[char]
  assert index >= 0 && index < s.len
  return ptr(s.base[index])

pub fn getIndex(ln Fmt s, int index) ptr[char]
  assert index >= 0 && index < s.len
  return ptr(s.base[index])

pub fn getIndex(ln Fmt s, range r) ptr[Fmt]
  assert r.start >= 0 && r.end <= s.len
  ptr[Fmt] newStr = alloc(1)
  int len = r.end - r.start
  newStr[0] = { base = ptr(s.base[r.start]), capacity = len, len = len }
  return newStr

pub struct Map[K, V]

pub struct Set[T]

pub struct Heap[T]

pub struct BST[T]

pub fn rand(int start, int end) int
  return 0

pub fn str(int val) str
  int len
  include
    _len = snprintf(NULL, 0, "%ld", *_val);

  ptr[char] output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%ld", *_val);
  return { base = output, len = len }
  
pub fn print(T val, str(T) strImpl=str) 
  ptr[char] printStr = cstr(strImpl(val))
  include
    printf("%s\n", _printStr);

pub fn str(char val) str
  Fmt buf = fmt(1)
  buf[0] = val
  return str(buf)

pub fn char(byte val) char
  include 
    return (char)(*_val);
  return '\0'

pub fn byte(char val) byte
  include
    return ($(byte))(*_val);
  return byte('\0')

pub struct Scanner[T]
  Arr[byte] buf
  T stream
  int!(T, Arr[byte]) readBytes
  int amtInBuf
  int i

pub fn scanner(T stream, int!(T, Arr[byte]) r=read) Scanner[T]
  return { buf = arr(1024), stream = stream, readBytes = r, amtInBuf = 0, i = 0 }

pub fn nextLine(ln Scanner[T] scanner) str!
  Fmt output = fmt()

  while true
    if scanner.i == scanner.amtInBuf
      scanner.amtInBuf = try scanner.readBytes(scanner.stream, scanner.buf)
      scanner.i = 0
    if scanner.amtInBuf == 0
      return Err("no next element")
    output += char(scanner.buf[scanner.i])
    scanner.i += 1
    if scanner.buf[scanner.i] == byte('\n')
      break

  return Ok(str(output))

pub fn input(str output) int!
  C.printf(cstr("%s"), cstr(output))
  int val = 0
  C.scanf(cstr("%ld"), ptr(val))
  return val

