simple language that makes common tasks as easy as possible
less common voodoo tasks can be harder, but still should be possible
RUST too complicated
python too slow, not enough control
C too unsafe, too much voodoo
C++ way too complicated, way too much voodoo, unsafe

# imports code recursively, only asks for specifics on collision
uses std py_matplotlib c_math

# function definitions
int add: int a int b
  c = a + b
  return c

# math operations
b + c * d

# structs
struct MyStruct
  int a
  int b

MyStruct d = (a = 0, b = 1)

# control flow

if a == b
else
loop i in 0 to 10
loop i < 10

break
continue

# only arrays are allocated on the heap, everything
# else is stack allocated. parameters are passed by value
push(List' a, int val)
  ...

void push(list', 10)

# wrappers around the heap objects allow for reallocation
# naming a field wrapped allows the outer type to use all of the inner type's variables
struct String
  str wrapped
  int capacity

struct List(T)
  arr(T) wrapped
  int capacity

# async and runtimes
# can not use values used in the branch blocks later
branch thread
  c = await read(stream, 100)
  
# errors

# assertions (crash program)
assert x == 15
a = assert an_err()

# propegate errors (must have return function error types)
a = try can_error()

# test errors
if can_err() ?= ok
  print(var)
else
  print()

# enums can be directly compared to their variants and return a bool
# an additional to can be added to convert it to it's inner value
  
# error types and enum
opt
err

enum opt(T)
  T some
  none

enum err(T)
  T ok 
  &string except

match opt
  some to val
     print(val, "exists")
  none
    print("no value exists")

# enum init
int? m = some: 10

int? is8 = .none
for i in 0 to 10
  if i == 8
    is8 = .some(8)

int? is8 = .none
int? is8 = .none

# defining errors as strings (an error code will be compiled into the error table which will point to the strings)
errcode NO_MEM = "no more memory in system"

# voodoo blocks
voodoo
  a = 10

# voodoo
ptr() get a pointer
deref() deref pointer
release_ptr() tell reference count it is ok to free

# some functions used by the language
iter[T] iter(view[T] view)
fmt(yourType, fmt' f)

# used for format strings
some structure and functions are generated by the compiler
fmt$l10$c20
set_request_buf(fmt' f, slice[u8]() nextBufferFn)
set_finalize(fmt' f)
begin_write(fmt' f)
  slice[u8] buf = request_buffer(f)
  mem_copy(buf, sec1)

  fmt(f', f.item1)

request_buf(fmt' f)
finalize(fmt' f)

int main()
  str s = "hello world how are you"
  scope str[] = s.split(' ')



    
    

