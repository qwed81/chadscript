use "include/string.h" as memory, "include/stdlib.h" as stdlib

struct type

macro alignOf(type t) int
  ret 0

macro sizeOf(type t) int
  ret 0

struct err
  str message

fn err(str message) err
  ret { message = message }

enum TypeUnion[T, K]
  T val0
  K val1

struct range
  int start
  int end
  int output

impl next(&range r) *int
  r.output = r.start
  if r.start == r.end
    ret nil
  r.start += 1
  ret &r.output

fn rev(range r) revRange
  ret { start = r.end - 1, end = r.start - 1, output = r.end - 1 }

struct revRange
  int start
  int end
  int output

impl next(&revRange r) *int
  r.output = r.start 
  if r.start == r.end
    ret nil
  r.start -= 1
  ret &r.output

struct bump
  *u8 base
  *u8 curr

local bump bp = {}

fn clear(&bump bp)
  int diff = int(u64(bp.curr) - u64(bp.base))
  memSet(bp.base, 0, diff)
  bp.curr = bp.base

fn memEq(*T memA, *T memB, int size) bool
  *u8 u8memA = ptr(memA)
  *u8 u8memB = ptr(memB)
  ret memory::memcmp(u8memA, u8memB, u32(size)) == 0

fn memSet(*T mem, int val, int amt)
  *u8 u8mem = ptr(mem)
  *u8 _ = memory::memset(u8mem, val, u32(amt))

fn memCopy(*T dest, *T src, int size)
  *u8 u8memDest = ptr(dest)
  *u8 u8memSrc = ptr(src)
  *u8 _ = memory::memcpy(u8memDest, u8memSrc, u32(size))

fn alloc(&bump bp, int amt) *T
  int allocSize = amt * @sizeOf(T)
  if bp.base == nil
    bp.base = malloc(1024 * 1024)
    bp.curr = bp.base

  *T newLoc = ptr(bp.curr)
  newLoc = align(newLoc)
  bp.curr = ptr(&newLoc[amt])
  memSet(newLoc, 0, allocSize)
  ret newLoc

fn alloc(int amt) *T
  ret alloc(bp, amt)

fn align(*T p) *T
  include
    size_t loc = (size_t)_p & ~alignof($(T));
    if (loc == (size_t)_p) return _p;
    return ($(T)*)(loc + sizeof($(T)));
  ret nil

fn malloc(int amt) *T
  int size = amt * @sizeOf(T)
  *u8 out = stdlib::malloc(u32(size))
  ret ptr(out)

fn free(*T mem)
  stdlib::free(ptr(mem))

fn min(int a, int b) int
  if b < a
    ret b
  ret a

fn max(int a, int b) int
  if b > a
    ret b
  ret a

fn abs(f32 a) f32
  if a < 0.0
    ret a * f32(-1)
  ret a

fn print(T val)
  Fmt f = fmt()
  format(f, val)
  *char output = cstr({ base = f.base, len = f.len })
  include
    printf("%s\n", _output);

struct Vec[T]
  get *T base
  get int capacity
  get int len

impl index(&Vec[T] vec, int index) *T
  assert index >= 0 && index < vec.len
  ret &vec.base[index]

fn vec(int amt) Vec[T]
  ret { base = alloc(amt), capacity = amt, len = amt }

fn append(&Vec[T] l, T val)
  if l.len == l.capacity
    *T newAlloc = alloc(max(l.capacity * 2, 4))

    for i in 0:l.len
      newAlloc[i] = l.base[i]
    l.base = newAlloc
    l.capacity = max(l.capacity * 2, 4)

  l.base[l.len] = val
  l.len += 1

fn remove(&Vec[T] l, int index)
  assert index < l.len && index >= 0
  for i in index:l.len - 1
    l.base[i] = l.base[i + 1] 
  l.len -= 1

struct str
  get *char base
  get int len

impl index(&str s, int index) *char
  assert index >= 0 && index < s.len
  ret &s.base[index]

impl index(&str s, range r) *str
  assert r.start >= 0 && r.start < s.len
  *str newStr = alloc(1)
  newStr[0] = { base = &s.base[r.start], len = r.end - r.start }
  ret newStr

fn str(str s) str
  ret s

fn cstr(str s) *char
  *char cstr = alloc(s.len + 1)
  for i in 0:s.len
    cstr[i] = s[i]
  cstr[s.len] = '\0'
  ret cstr

fn lines(str s) Vec[str]
  ret split(s, '\n')

fn split(str s) Vec[str]
  ret split(s, ' ')

fn split(str s, char c) Vec[str]
  Vec[str] output = []

  int end = 0
  int start = 0
  while true
    if end >= s.len 
      break
    if s[end] == c
      append(output, s[start:end])
      start = end + 1
    end += 1
  append(output, s[start:s.len])
  ret output

fn trim(str s) str
  int start = 0
  while start < s.len && (s[start] == ' ' || s[start] == '\n' || s[start] == '\t')
    start += 1
  int end = s.len - 1
  while end >= 0 && (s[end] == ' ' || s[end] == '\n' || s[end] == '\t')
    end -= 1
  ret s[start:end]

fn contains(str s, str inner) bool
  for i in 0:(s.len - inner.len + 1)
    bool contained = true
    for j in 0:inner.len
      if s[i] != inner[j]
        contained = false
        break
    if contained
      ret true
  ret false

fn startsWith(str s, str start) bool
  if s.len < start.len
    ret false
  for i in 0:start.len
    if s[i] != start[i]
      ret false
  ret true

fn endsWith(str s, str end) bool
  if s.len < end.len
    ret false
  for i in 0:end.len
    if s[s.len - end.len + i] != end[i]
      ret false
  ret true

fn indexOf(str s, str inner) int|nil
  for i in 0:(s.len - inner.len + 1)
    bool contained = true
    for j in 0:inner.len
      if s[i] != inner[j]
        contained = false
        break
    if contained
      ret i
  ret nil

fn lastIndexOf(str s, str inner) int|nil
  for i in rev(0:(s.len - inner.len + 1))
    bool contained = true
    for j in 0:inner.len
      if s[i] != inner[j]
        contained = false
        break
    if contained
      ret i
  ret nil

struct Fmt
  get *char base
  get int capacity
  get int len

impl index(&Fmt s, int index) *char
  assert index >= 0 && index < s.len
  ret &s.base[index]

fn fmt() Fmt
  ret { base = alloc(8), capacity = 8, len = 0 }

fn fmt(int size) Fmt
  ret { base = alloc(size), capacity = size, len = size }

fn clone(Fmt buf) Fmt
  *char newBase = alloc(buf.len)
  for i in 0:buf.len
    newBase[i] = buf[i]
  ret { base = newBase, capacity = buf.len, len = buf.len }

fn fromUtf8(Vec[u8] bytes) Fmt
  Fmt buf = fmt(bytes.len)
  for i in 0:bytes.len
    buf[i] = char(bytes[i])
  ret buf

fn toUtf8(Fmt buf) Vec[u8]
  Vec[u8] bytes = vec(buf.len)
  for i in 0:buf.len
    bytes[i] = u8(buf[i])
  ret bytes

fn fmt(str start) Fmt
  Fmt buf = fmt()
  buf ++= start
  ret buf

fn str(Fmt buf) str
  ret { base = buf.base, len = buf.len }

pri fn appendOne(&Fmt s, char c)
  if s.len == s.capacity
    *char newAlloc = alloc(max(s.capacity * 2, 4))

    for i in 0:s.len
      newAlloc[i] = s.base[i]
    s.base = newAlloc
    s.capacity = max(s.capacity * 2, 4)

  s.base[s.len] = c
  s.len += 1

decl impl format(&Fmt fmt, T input)
  fmt ++= "( "
  bool usedField = false
  for field in input
    usedField = true
    format(fmt, field.name)
    fmt ++= ": "
    format(fmt, field.val)
    fmt ++= ", "

  if usedField
    fmt.len -= 2

  fmt ++= " )"

impl format(&Fmt fmt, str s)
  for i in 0:s.len
    appendOne(fmt, s[i])

impl format(&Fmt fmt, u64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%lu", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lu", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, u32 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, u16 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, u8 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, i64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%ld", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%ld", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, int val)
  format(fmt, i64(val))

impl format(&Fmt fmt, i16 val)
  format(fmt, i64(val))

impl format(&Fmt fmt, i8 val)
  format(fmt, i64(val))

impl format(&Fmt fmt, f64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%lf", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lf", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, f32 val)
  format(fmt, f64(val))

impl format(&Fmt fmt, bool val)
  if val == true
    format(fmt, "true")
  else
    format(fmt, "false")

impl format(&Fmt fmt, *T p)
  format(fmt, u64(p))

impl format(&Fmt f, Vec[T] vec)
  f ++= '['
  for i in 0:vec.len
    f ++= vec[i]
    if i != vec.len - 1
      f ++= ", "
  f ++= ']'

impl format(&Fmt f, char c)
  appendOne(f, c)

decl impl eq(T a, T b) bool
  ret memEq(&a, &b, @sizeOf(T))

impl eq(str a, str b) bool
  if a.len != b.len
    ret false
  ret memEq(a.base, b.base, a.len)

impl eq(Vec[T] a, Vec[T] b) bool
  if a.len != b.len
    ret false
  for i in 0:a.len
    if !eq(a[i], b[i])
      ret false
  ret true

decl impl hash(K key, &u32 hashState)
  for field in key
    hash(field.val, hashState)

impl hash(u64 key, &u32 hashState)
  hashState += u32((key & 32) ^ (key >> 32) ^ 2984300601)

impl hash(u32 key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(u16 key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(u8 key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(i64 key, &u32 hashState)
  hashState += u32((key & 32) ^ (key >> 32) ^ 2984300601)

impl hash(int key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(i16 key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(i8 key, &u32 hashState)
  hashState += u32(key ^ 2984300601)

impl hash(char key, &u32 hashState)
  hashState += u32(u32(key) ^ 2984300601)

impl hash(bool key, &u32 hashState)
  hashState += u32(key)

impl hash(f64 key, &u32 hashState)
  hashState += u32(u64(key) ^ 2984300601)

impl hash(f32 key, &u32 hashState)
  hashState += u32(u32(key) ^ 2984300601)

impl hash(Vec[T] key, &u32 hashState)
  for i in 0:key.len
    hash(key[i], hashState)

impl hash(str key, &u32 hashState)
  for i in 0:key.len
    hash(key[i], hashState)

struct MapEntry[K, V]
  K key
  V val
  pri bool hasValue

struct Map[K, V]
  get int len
  get int capacity
  pri *MapEntry[K, V] entries

fn allocMap(int capacity) Map[K, V]
  assert capacity > 0
  ret { len = 0, capacity = capacity, entries = alloc(capacity) }

fn lookupMapEntry(*MapEntry[K, V] entries, int capacity, K key) *MapEntry[K, V]
  u32 hashState = 0
  hash(key, hashState)
  int i = int(hashState & u32(capacity - 1))
  while entries[i].hasValue && key != entries[i].key
    i = ((i + 1) & (capacity - 1))
  ret &entries[i]

impl index(&Map[K, V] map, K key) *V
  assert map.len > 0
  *MapEntry[K, V] entry = lookupMapEntry(map.entries, map.capacity, key)
  assert entry[0].hasValue
  ret &entry[0].val

fn set(&Map[K, V] map, K key, V value)
  if map.len > 0
    *MapEntry[K, V] entry = lookupMapEntry(map.entries, map.capacity, key)
    if entry[0].hasValue
      entry[0].val = value
      ret

  if map.len * 5 >= map.capacity * 4
    int newCapacity = max(8, map.capacity * 2)
    *MapEntry[K, V] newEntries = alloc(newCapacity) 
    for i in 0:map.capacity
      if map.entries[i].hasValue
        lookupMapEntry(newEntries, newCapacity, map.entries[i].key)[0] = map.entries[i]
    map.entries = newEntries
    map.capacity = newCapacity

  lookupMapEntry(map.entries, map.capacity, key)[0] = { key = key, val = value, hasValue = true }
  map.len += 1

impl format(&Fmt f, Map[K, V] map)
  f ++= '['
  for i in 0:map.capacity
    if map.entries[i].hasValue
      f ++= "("
      f ++= map.entries[i].key
      f ++= ": "
      f ++= map.entries[i].val
      f ++= ") , "
  f.len -= 3
  f ++= ']'

fn contains(Map[K, V] map, K key) bool
  *MapEntry[K, V] entry = lookupMapEntry(map.entries, map.capacity, key)
  ret entry == nil || !entry[0].hasValue

fn rand(int start, int end) int
  include
    return (_end - _start) * ((double)rand() / (double)RAND_MAX) + _start;
  ret 0

fn rand() f64
  include
    return ((double)rand() / (double)RAND_MAX);
  ret 0.0

fn input(str output) int|err
  int val = 0
  *char newOutput = cstr(output)
  include
    printf("%s", _newOutput);
  include
    scanf("%ld", &val);
  ret val
