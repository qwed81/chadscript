struct err
  str message

fn err(str message) err
  return { message = message }

enum TypeUnion[T, K]
  T val0
  K val1

struct range
  int start
  int end
  int output

fn next(&range r) *int
  r.output = r.start
  if r.start == r.end
    return nil
  r.start += 1
  return &r.output

##
fn rev(range r) revRange
  return { start = r.end - 1, end = r.start - 1, output = r.start - 1 }

struct revRange
  int start
  int end
  int output

fn next(&revRange r) *int
  int thisIndex = r.start
  if r.start == r.end
    return nil
  r.start -= 1
  return thisIndex
##

fn alloc(int amt) *T
  *T output
  include
    _output = malloc(sizeof($(T)) * *_amt);
  return output

fn null() *T
  include
    return NULL;
  return null()

fn ptrCast(*S input) *E
  include
    return ($(*E))(*_input);
  return ptrCast(input)

struct Arr[T]
  get *T base
  get int capacity
  get int len

fn arr() Arr[T]
  return { base = alloc(4), capacity = 4, len = 0 }

fn arr(int amt) Arr[T]
  return { base = alloc(amt), capacity = amt, len = amt }

fn str(Arr[T] l, str(T) strImpl=str) str
  Fmt buf = fmt()
  buf += "["
  for i in 0:l.len
    buf += strImpl(l[i])
    if i != l.len - 1
      buf += ','
  buf += ']'
  return str(buf)

fn append(&Arr[T] l, T val)
  if l.len == l.capacity
    *T newAlloc = alloc(l.capacity * 2)

    for i in 0:l.len
      newAlloc[i] = cp l.base[i]
    l.base = newAlloc
    l.capacity = l.capacity * 2

  l.base[l.len] = cp val
  l.len += 1

fn append(&Arr[T] to, Arr[T] from)
  for i in 0:from.len
    to += from[i]

struct str
  get *char base
  get int len

fn str(str s) str
  return s

fn eq(str a, str b) bool
  if a.len != b.len
    return false
  for i in 0:a.len
    if a[i] != b[i]
      return false
  return true

fn cstr(str s) *char
  *char cstr = alloc(s.len + 1)
  for i in 0:s.len
    cstr[i] = s[i]
  cstr[s.len] = '\0'
  return cstr

fn split(str s) Arr[str]
  return split(s, ' ')

fn split(str s, char c) Arr[str]
  Arr[str] output = []

  int end = 0
  int start = 0
  while true
    if end >= s.len 
      break
    if s[end] == c
      output += s[start:end]
      start = end + 1
    end += 1
  output += s[start:s.len]
  return output

fn trim(str s) str
  return ""

fn contains(str s, str inner) bool
  return false

fn startsWith(str s, str start) bool
  return false

fn endsWith(str s, str end) bool
  return false

fn indexOf(str s, str inner) int|nil
  return nil

fn lastIndexOf(str s, str inner) int|nil
  return nil

struct Fmt
  get *char base
  get int capacity
  get int len

fn fmt() Fmt
  return { base = alloc(8), capacity = 8, len = 0 }

fn fmt(int size) Fmt
  return { base = alloc(size), capacity = size, len = size }

fn clone(Fmt buf) Fmt
  *char newBase = alloc(buf.len)
  for i in 0:buf.len
    newBase[i] = buf[i]
  return { base = newBase, capacity = buf.len, len = buf.len }

fn fromUtf8(Arr[u8] bytes) Fmt
  Fmt buf = fmt(bytes.len)
  for i in 0:bytes.len
    buf[i] = char(bytes[i])
  return buf

fn toUtf8(Fmt buf) Arr[u8]
  Arr[u8] bytes = arr(buf.len)
  for i in 0:buf.len
    bytes[i] = u8(buf[i])
  return bytes

fn fmt(str start) Fmt
  Fmt buf = fmt()
  append(buf, start)
  return buf

fn str(Fmt buf) str
  return { base = buf.base, len = buf.len }

fn appendOne(&Fmt s, char c)
  if s.len == s.capacity
    *char newAlloc = alloc(s.capacity * 2)

    for i in 0:s.len
      newAlloc[i] = s.base[i]
    s.base = newAlloc
    s.capacity = s.capacity * 2

  s.base[s.len] = c
  s.len += 1

fn append(&Fmt s, T val, str(T) strImpl=str)
  str valAsStr = strImpl(val)
  for i in 0:valAsStr.len
    appendOne(s, valAsStr[i])

struct Map[K, V]

struct Set[T]

struct Heap[T]

struct BST[T]

fn rand(int start, int end) int
  include
    return (*_end - *_start) * ((double)rand() / (double)RAND_MAX) + *_start;
  return 0

fn rand() f64
  include
    return ((double)rand() / (double)RAND_MAX);
  return 0.0

fn str(int val) str
  int len
  include
    _len = snprintf(NULL, 0, "%ld", *_val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%ld", *_val);
  return { base = output, len = len }

fn str(f64 val) str
  int len
  include
    _len = snprintf(NULL, 0, "%lf", *_val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lf", *_val);
  return { base = output, len = len }
  
fn print(T val, str(T) strImpl=str) 
  *char printStr = cstr(strImpl(val))
  include
    printf("%s\n", _printStr);

fn str(char val) str
  Fmt buf = fmt(1)
  buf[0] = val
  return str(buf)

fn char(u8 val) char
  include 
    return (char)(*_val);
  return '\0'

fn u8(char val) u8
  include 
    return (uint8_t)(*_val);
  return 0

struct Scanner[T]
  Arr[u8] buf
  T stream
  TypeUnion[int, err](T, Arr[u8]) readBytes
  int amtInBuf
  int i

fn scanner(T stream, TypeUnion[int, err](T, Arr[u8]) r=read) Scanner[T]
  return { buf = arr(1024), stream = mv stream, readBytes = r, amtInBuf = 0, i = 0 }

fn nextLine(&Scanner[T] scanner) str|err
  Fmt output = fmt()

  while true
    if scanner.i == scanner.amtInBuf
      scanner.amtInBuf = try scanner.readBytes(scanner.stream, scanner.buf)
      scanner.i = 0
    if scanner.amtInBuf == 0
      return err("no next element")
    output += char(scanner.buf[scanner.i])
    scanner.i += 1
    if scanner.buf[scanner.i] == u8('\n')
      break

  return str(output)

fn str(i32 val) str
  return str(int(val))

fn f64(int val) f64
  include
    return ($(f64))*_val;
  return 0

fn int(i32 val) int
  include
    return ($(int))*_val;
  return 0

fn f32(f64 val) f32
  include
    return ($(f32))*_val;
  return f32(0.0)

fn input(str output) int|err
  C.printf(cstr("%s"), cstr(output))
  int val = 0
  C.scanf(cstr("%ld"), &val)
  return val

