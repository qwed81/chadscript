struct err
  str message

fn err(str message) err
  ret { message = message }

enum TypeUnion[T, K]
  T val0
  K val1

struct range
  int start
  int end
  int output

impl next(&range r) *int
  r.output = r.start
  if r.start == r.end
    ret nil
  r.start += 1
  ret &r.output

##
fn rev(range r) revRange
  ret { start = r.end - 1, end = r.start - 1, output = r.start - 1 }

struct revRange
  int start
  int end
  int output

fn next(&revRange r) *int
  int thisIndex = r.start
  if r.start == r.end
    ret nil
  r.start -= 1
  ret thisIndex
##

fn print(T val)
  Fmt f = fmt()
  format(f, val)
  *char output = cstr({ base = f.base, len = f.len })
  include
    printf("%s\n", _output);

fn alloc(int amt) *T
  *T output = nil
  include
    _output = malloc(sizeof($(T)) * _amt);
  ret output

fn ptrCast(*S input) *E
  include
    return ($(*E))(_input);
  ret nil

struct Vec[T]
  get *T base
  get int capacity
  get int len

impl index(&Vec[T] vec, int index) *T
  assert index >= 0 && index < vec.len
  ret &vec.base[index]

fn vec(int amt) Vec[T]
  ret { base = alloc(amt), capacity = amt, len = amt }

fn str(Vec[T] l) str
  Fmt buf = fmt()
  buf ++= "["
  for i in 0:l.len
    buf ++= l[i]
    if i != l.len - 1
      buf ++= ','
  buf ++= ']'
  ret str(buf)

impl append(&Vec[T] l, T val)
  if l.len == l.capacity
    *T newAlloc = alloc(l.capacity * 2)

    for i in 0:l.len
      newAlloc[i] = l.base[i]
    l.base = newAlloc
    l.capacity = l.capacity * 2

  l.base[l.len] = val
  l.len += 1

impl append(&Vec[T] to, Vec[T] from)
  for i in 0:from.len
    to ++= from[i]

struct str
  get *char base
  get int len

impl index(&str s, int index) *char
  assert index >= 0 && index < s.len
  ret &s.base[index]

impl index(&str s, range r) *str
  assert r.start >= 0 && r.start < s.len
  *str newStr = alloc(1)
  newStr[0] = { base = &s.base[r.start], len = r.end - r.start }
  ret newStr

fn str(str s) str
  ret s

impl eq(str a, str b) bool
  if a.len != b.len
    ret false
  for i in 0:a.len
    if a[i] != b[i]
      ret false
  ret true

fn cstr(str s) *char
  *char cstr = alloc(s.len + 1)
  for i in 0:s.len
    cstr[i] = s[i]
  cstr[s.len] = '\0'
  ret cstr

fn split(str s) Vec[str]
  ret split(s, ' ')

fn split(str s, char c) Vec[str]
  Vec[str] output = []

  int end = 0
  int start = 0
  while true
    if end >= s.len 
      break
    if s[end] == c
      output ++= s[start:end]
      start = end + 1
    end += 1
  output ++= s[start:s.len]
  ret output

fn trim(str s) str
  ret ""

fn contains(str s, str inner) bool
  ret false

fn startsWith(str s, str start) bool
  ret false

fn endsWith(str s, str end) bool
  ret false

fn indexOf(str s, str inner) int|nil
  ret nil

fn lastIndexOf(str s, str inner) int|nil
  ret nil

struct Fmt
  get *char base
  get int capacity
  get int len

impl index(&Fmt s, int index) *char
  assert index >= 0 && index < s.len
  ret &s.base[index]

fn fmt() Fmt
  ret { base = alloc(8), capacity = 8, len = 0 }

fn fmt(int size) Fmt
  ret { base = alloc(size), capacity = size, len = size }

fn clone(Fmt buf) Fmt
  *char newBase = alloc(buf.len)
  for i in 0:buf.len
    newBase[i] = buf[i]
  ret { base = newBase, capacity = buf.len, len = buf.len }

fn fromUtf8(Vec[u8] bytes) Fmt
  Fmt buf = fmt(bytes.len)
  for i in 0:bytes.len
    buf[i] = char(bytes[i])
  ret buf

fn toUtf8(Fmt buf) Vec[u8]
  Vec[u8] bytes = vec(buf.len)
  for i in 0:buf.len
    bytes[i] = u8(buf[i])
  ret bytes

fn fmt(str start) Fmt
  Fmt buf = fmt()
  buf ++= start
  ret buf

fn str(Fmt buf) str
  ret { base = buf.base, len = buf.len }

pri fn appendOne(&Fmt s, char c)
  if s.len == s.capacity
    *char newAlloc = alloc(s.capacity * 2)

    for i in 0:s.len
      newAlloc[i] = s.base[i]
    s.base = newAlloc
    s.capacity = s.capacity * 2

  s.base[s.len] = c
  s.len += 1

decl format(&Fmt fmt, T val)

impl format(&Fmt fmt, str s)
  for i in 0:s.len
    appendOne(fmt, s[i])

impl format(&Fmt fmt, int val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%ld", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%ld", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

struct Map[K, V]

struct Set[T]

struct Heap[T]

struct BST[T]

fn rand(int start, int end) int
  include
    return (*_end - *_start) * ((double)rand() / (double)RAND_MAX) + *_start;
  ret 0

fn rand() f64
  include
    return ((double)rand() / (double)RAND_MAX);
  ret 0.0

fn str(f64 val) str
  int len = 0
  include
    _len = snprintf(NULL, 0, "%lf", *_val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lf", *_val);
  ret { base = output, len = len }

fn str(char val) str
  Fmt buf = fmt(1)
  buf[0] = val
  ret str(buf)

fn input(str output) int|err
  int val = 0
  *char newOutput = cstr(output)
  include
    printf("%s", _newOutput);
  include
    scanf("%ld", &val);
  ret val
