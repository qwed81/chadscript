use "include/string.h" as memory, "include/pthread.h"

const u64 MAX_U64 = 18446744073709551615 
const u32 MAX_U32 = 4294967295 
const u16 MAX_U16 = 65535
const u8 MAX_U8 = 255

const i64 MAX_I64 = 9223372036854775807
const int MAX_INT = 2147483647 
const i16 MAX_I16 = 32767
const i8 MAX_I8 = 127

const i64 MIN_I64 = -9223372036854775807
const int MIN_INT = -2147483648 
const i16 MIN_I16 = -32768
const i8 MIN_I8 = -128

# defined by compiler
struct type

# defined by compiler
macro alignOf(type t) int
  ret 0

# defined by compiler
macro sizeOf(type t) int
  ret 0

struct err
  str message

fn err(str message) err
  ret { message = message }

struct vec[T, int N]

enum TypeUnion[T, K]
  T val0
  K val1

struct Range
  int start
  int end

impl next(&Range r) *int
  r.start += 1
  if r.start == r.end
    ret nil
  ret &r.start

fn rev(Range r) RevRange
  ret { start = r.end - 1, end = r.start, output = r.end - 1 }

struct RevRange
  int start
  int end
  int output

impl next(&RevRange r) *int
  r.output = r.start 
  if r.start == r.end
    ret nil
  r.start -= 1
  ret &r.output

decl impl realloc(&T item, &BumpAlloc bump)
  for field in item
    realloc(field.val, bump)

struct BumpAlloc
  *u8 base
  *u8 curr

local BumpAlloc bp = {}

fn exit(int status)
  include
    exit(_status);

fn clear(&BumpAlloc bp)
  bp.curr = bp.base

fn free(&BumpAlloc bp)
  free(bp.base)
  bp.base = nil
  bp.curr = nil

fn memEq(*const T memA, *const T memB, int size) bool
  *u8 u8memA = ptr(memA)
  *u8 u8memB = ptr(memB)
  ret memory::memcmp(u8memA, u8memB, u64(size)) == 0

fn memSet(*T mem, int val, int amt)
  *u8 u8mem = ptr(mem)
  *u8 _ = memory::memset(u8mem, val, u64(amt))

fn memCopy(*T dest, *const T src, int size)
  *u8 u8memDest = ptr(dest)
  *u8 u8memSrc = ptr(src)
  *u8 _ = memory::memcpy(u8memDest, u8memSrc, u64(size))

fn alloc(&BumpAlloc bp, int amt) *T
  int allocSize = amt * @sizeOf(T)
  if bp.base == nil
    bp.base = malloc(1024 * 1024)
    bp.curr = bp.base

  *T newLoc = ptr(bp.curr)
  newLoc = align(newLoc)
  bp.curr = ptr(&newLoc[amt])
  memSet(newLoc, 0, allocSize)
  ret newLoc

fn alloc(int amt) *T
  ret alloc(bp, amt)

fn align(*T p) *T
  *T output = nil
  include
    size_t loc = (size_t)_p & ~alignof($(T));
    if (loc == (size_t)_p) _output = _p;
    else _output = ($(T)*)(loc + sizeof($(T)));
  ret output

fn malloc(int amt) *T
  int size = amt * @sizeOf(T)
  *u8 out = nil
  include
    _out = malloc(_size);
  ret ptr(out)

fn free(*T mem)
  include
    free(_mem);

fn print(T val)
  Fmt fmt = {}
  format(fmt, val)
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2, Z val3)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  fmt ++= ' '
  fmt ++= val3
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2, Z val3, A val4)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  fmt ++= ' '
  fmt ++= val3
  fmt ++= ' '
  fmt ++= val4
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2, Z val3, A val4, B val5)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  fmt ++= ' '
  fmt ++= val3
  fmt ++= ' '
  fmt ++= val4
  fmt ++= ' '
  fmt ++= val5
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2, Z val3, A val4, B val5, C val6)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  fmt ++= ' '
  fmt ++= val3
  fmt ++= ' '
  fmt ++= val4
  fmt ++= ' '
  fmt ++= val5
  fmt ++= ' '
  fmt ++= val6
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

fn print(T val0, X val1, Y val2, Z val3, A val4, B val5, C val6, D val7)
  Fmt fmt = {}
  fmt ++= val0
  fmt ++= ' '
  fmt ++= val1
  fmt ++= ' '
  fmt ++= val2
  fmt ++= ' '
  fmt ++= val3
  fmt ++= ' '
  fmt ++= val4
  fmt ++= ' '
  fmt ++= val5
  fmt ++= ' '
  fmt ++= val6
  fmt ++= ' '
  fmt ++= val7
  *char output = cstr({ base = fmt.base, len = fmt.len })
  include
    printf("%s\n", _output);

impl index(&vec[T, int N] s, Range r) seg[T]
  int start = r.start + 1
  assert start >= 0 && start <= r.end && r.end <= N
  ret { base = &s[start], len = r.end - start }

struct seg[T]
  get *T base
  get int len

struct SegIter[T]
  seg[T] s
  int i

fn iter(seg[T] s) SegIter[T]
  ret { s = s, i = -1 }

impl next(&SegIter[T] iter) *T
  iter.i += 1
  if iter.i == iter.s.len; ret nil
  ret &iter.s.base[iter.i]

fn clone(seg[T] s) Arr[T]
  Arr[T] output = arr(s.len)
  memCopy(output.base, s.base, s.len * @sizeOf(T))
  ret output

impl eq(seg[T] s0, seg[T] s1) bool
  if s0.len != s1.len; ret false
  for i in 0:s0.len
    if s0[i] != s1[i]; ret false
  ret true

impl index(&seg[T] s, int index) *T
  assert index >= 0 && index < s.len
  ret &s.base[index]

impl index(&seg[T] s, Range r) seg[T]
  int start = r.start + 1
  assert start >= 0 && start <= r.end && r.end <= s.len
  ret { base = &s[start], len = r.end - start }

struct Arr[T]
  get *T base
  get int len
  get int capacity

fn clone(Arr[T] a) Arr[T]
  Arr[T] output = arr(a.len)
  memCopy(output.base, a.base, a.len * @sizeOf(T))
  ret output

impl realloc(&Arr[T] arr, &BumpAlloc bump)
  *T newPtr = alloc(bump, arr.capacity)
  memCopy(newPtr, arr.base, arr.len)
  arr.base = newPtr

impl eq(Arr[T] a0, Arr[T] a1) bool
  if a0.len != a1.len; ret false
  for i in 0:a0.len
    if a0[i] != a1[i]; ret false
  ret true

impl index(&Arr[T] arr, int index) *T
  assert index >= 0 && index < arr.len
  ret &arr.base[index]

impl index(&Arr[T] s, Range r) seg[T]
  int start = r.start + 1
  assert start >= 0 && start <= r.end && r.end <= s.len
  ret { base = &s.base[start], len = r.end - start }

fn arr(int amt) Arr[T]
  ret { base = alloc(amt), capacity = amt, len = amt }

fn extend(&Arr[T] l, Arr[T] other)
  for i in 0:other.len
    append(l, other[i])

fn append(&Arr[T] l, T val)
  if l.len == l.capacity
    *T newAlloc = alloc(max(l.capacity * 2, 4))

    for i in 0:l.len
      newAlloc[i] = l.base[i]
    l.base = newAlloc
    l.capacity = max(l.capacity * 2, 4)

  l.base[l.len] = val
  l.len += 1

fn remove(&Arr[T] l, int index)
  assert index < l.len && index >= 0
  for i in index:l.len - 1
    l.base[i] = l.base[i + 1] 
  l.len -= 1

struct str
  get *const char base
  get int len

impl index(&str s, int index) *const char
  assert index >= 0 && index < s.len
  ret &s.base[index]

impl index(&str s, Range r) str
  int start = r.start + 1
  assert start >= 0 && start <= r.end && r.end <= s.len
  ret { base = &s.base[start], len = r.end - start }

struct StrIter
  str s
  int i

fn iter(str s) StrIter 
  ret { s = s, i = -1 }

impl next(&StrIter iter) *const char
  iter.i += 1
  if iter.i == iter.s.len; ret nil
  ret &iter.s.base[iter.i]

fn str(str s) str
  ret s

fn cstr(str s) *char
  *char cstr = alloc(s.len + 1)
  memCopy(cstr, s.base, s.len)
  ret cstr

fn str(*char s) str
  ret { base = s, len = int(memory::strlen(s)) }

fn str(Arr[u8] buf) str
  ret { base = ptr(buf.base), len = buf.len }

fn isAlphaNum(str s) bool
  for i in 0:s.len
    bool isAlpha = (s.base[i] >= 'A' && s.base[i] <= 'Z') || (s.base[i] >= 'a' && s.base[i] <= 'z')
    bool isNum = s.base[i] >= '0' && s.base[i] <= '9'
    if !isAlpha && !isNum; ret false
  ret true

fn clone(str s) str
  *char newAlloc = alloc(s.len)
  memCopy(newAlloc, ptr(s.base), s.len)
  ret { base = newAlloc, len = s.len }

fn arr(SplitIter iter) Arr[str]
  Arr[str] output = []
  for s in iter
    append(output, s)
  ret output

struct SplitIter
  str s
  int i
  char delim
  bool whiteSpace

impl next(&SplitIter iter) *const str
  iter.i += 1
  if iter.i >= iter.s.len; ret nil

  int startI = iter.i
  while iter.i < iter.s.len
    if iter.s[iter.i] == iter.delim; break
    if iter.whiteSpace
      if iter.s[iter.i] == ' ' || iter.s[iter.i] == '\n' || iter.s[iter.i] == '\t'; break
    iter.i += 1

  ret &iter.s[startI:iter.i]

fn lines(str s) SplitIter
  ret split(s, '\n')

fn split(str s) SplitIter
  ret { s, delim = ' ', i = -1, whiteSpace = true }

fn split(str s, char delim) SplitIter
  ret { s, delim, i = -1, whiteSpace = false }

fn trim(str s) str
  int start = 0
  while start < s.len && (s[start] == ' ' || s[start] == '\n' || s[start] == '\t')
    start += 1
  int end = s.len - 1
  while end >= 0 && (s[end] == ' ' || s[end] == '\n' || s[end] == '\t')
    end -= 1
  ret s[start:end + 1]

fn contains(str s, str inner) bool
  for i in 0:(s.len - inner.len + 1)
    bool contained = true
    for j in 0:inner.len
      if s[i + j] != inner[j]
        contained = false
        break
    if contained; ret true
  ret false

fn startsWith(str s, str start) bool
  if s.len < start.len; ret false
  for i in 0:start.len
    if s[i] != start[i]; ret false
  ret true

fn endsWith(str s, str end) bool
  if s.len < end.len; ret false
  for i in 0:end.len
    if s[s.len - end.len + i] != end[i]; ret false
  ret true

fn indexOf(str s, str inner) int
  for i in 0:(s.len - inner.len + 1)
    bool contained = true
    for j in 0:inner.len
      if s[i + j] != inner[j]
        contained = false
        break
    if contained; ret i
  ret -1

fn indexOf(str s, char inner) int
  for i in 0:s.len
    if s[i] == inner; ret i
  ret -1

fn lastIndexOf(str s, str inner) int
  for i in rev(0:(s.len - inner.len + 1))
    bool contained = true
    for j in 0:inner.len
      if s[i + j] != inner[j]
        contained = false
        break
    if contained; ret i
  ret -1

fn lastIndexOf(str s, char inner) int
  for i in rev(0:s.len)
    if s[i] == inner; ret i
  ret -1

impl eq(str a, str b) bool
  if a.len != b.len; ret false
  ret memEq(a.base, b.base, a.len)

impl cmp(str a, str b) int
  for i in 0:min(a.len, b.len)
    if a[i] < b[i]; ret -1
    if b[i] < a[i]; ret 1
  ret 0

struct Fmt
  get *char base
  get int capacity
  get int len

impl index(&Fmt s, int index) *char
  assert index >= 0 && index < s.len
  ret &s.base[index]

fn fmt() Fmt
  ret { base = alloc(8), capacity = 8, len = 0 }

fn fmt(int size) Fmt
  ret { base = alloc(size), capacity = size, len = size }

fn clone(Fmt buf) Fmt
  *char newBase = alloc(buf.len)
  memCopy(newBase, buf.base, buf.len)
  ret { base = newBase, capacity = buf.len, len = buf.len }

fn fmt(str start) Fmt
  Fmt buf = fmt()
  buf ++= start
  ret buf

fn str(Fmt buf) str
  ret { base = buf.base, len = buf.len }

pri fn appendOne(&Fmt s, char c)
  if s.len == s.capacity
    *char newAlloc = alloc(max(s.capacity * 2, 4))

    for i in 0:s.len
      newAlloc[i] = s.base[i]
    s.base = newAlloc
    s.capacity = max(s.capacity * 2, 4)

  s.base[s.len] = c
  s.len += 1

decl impl format(&Fmt fmt, T input)
  fmt ++= "\{ "
  bool usedField = false
  for field in input
    usedField = true
    format(fmt, field.name)
    fmt ++= " = "
    format(fmt, field.val)
    fmt ++= ", "

  if usedField
    fmt.len -= 2

  fmt ++= " \}"

impl format(&Fmt fmt, T|nil s) 
  if s is nil
    fmt ++= "nil"
  else
    fmt ++= s

impl format(&Fmt fmt, seg[T] s)
  fmt ++= '['
  for i in 0:s.len
    fmt ++= s[i]
    if i != s.len - 1
      fmt ++= ", "
  fmt ++= ']'

impl format(&Fmt fmt, vec[int, int N] v)
  fmt ++= '['
  for i in 0:N
    fmt ++= v[i]
    if i != N - 1
      fmt ++= ", "
  fmt ++= ']'

impl format(&Fmt fmt, nil s)
  fmt ++= "nil"

impl format(&Fmt fmt, Fmt s)
  format(fmt, str(s))

impl format(&Fmt fmt, str s)
  for i in 0:s.len; appendOne(fmt, s[i])

impl format(&Fmt fmt, u64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%lu", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lu", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, u32 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, u16 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, u8 val)
  format(fmt, u64(val))

impl format(&Fmt fmt, i64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%ld", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%ld", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, int val)
  format(fmt, i64(val))

impl format(&Fmt fmt, i16 val)
  format(fmt, i64(val))

impl format(&Fmt fmt, i8 val)
  format(fmt, i64(val))

impl format(&Fmt fmt, f64 val)
  int len = 0
  include
    _len = snprintf(NULL, 0, "%lf", _val);

  *char output = alloc(len + 1)
  include
    snprintf(_output, _len + 1, "%lf", _val);

  str newStr = { base = output, len = len }
  fmt ++= newStr

impl format(&Fmt fmt, f32 val)
  format(fmt, f64(val))

impl format(&Fmt fmt, bool val)
  if val == true
    format(fmt, "true")
  else
    format(fmt, "false")

impl format(&Fmt fmt, *const T p)
  format(fmt, u64(p))

impl format(&Fmt f, Arr[T] arr)
  format(f, arr[:])

impl format(&Fmt f, char c)
  appendOne(f, c)

decl impl eq(T a, T b) bool
  ret memEq(&a, &b, @sizeOf(T))

impl eq(f64 a, f64 b) bool
  ret a == b

impl eq(f32 a, f32 b) bool
  ret a == b

decl hash(K key, &u32 hashState)

impl hash(u64 key, &u32 hashState) 
  hashState += u32((key & 32) ^ (key >> 32))

impl hash(u32 key, &u32 hashState)
  hashState += u32(key)

impl hash(u16 key, &u32 hashState)
  hashState += u32(key)

impl hash(u8 key, &u32 hashState)
  hashState += u32(key)

impl hash(i64 key, &u32 hashState)
  hashState += u32((key & 32) ^ (key >> 32))

impl hash(int key, &u32 hashState)
  hashState += u32(key)

impl hash(i16 key, &u32 hashState)
  hashState += u32(key)

impl hash(i8 key, &u32 hashState)
  hashState += u32(key)

impl hash(char key, &u32 hashState)
  hashState += u32(key)

impl hash(bool key, &u32 hashState)
  hashState += u32(key)

impl hash(Arr[T] key, &u32 hashState)
  for i in 0:key.len
    hash(key[i], hashState)

impl hash(str key, &u32 hashState)
  for i in 0:key.len
    hash(key[i], hashState)

struct MapEntry[K, V]
  V val # DO NOT REORDER
  K key
  pri bool hasValue

struct Map[K, V]
  get int len
  get int capacity
  pri *MapEntry[K, V] entries

fn allocMap(int capacity) Map[K, V]
  assert capacity > 0
  ret { len = 0, capacity = capacity, entries = alloc(capacity) }

fn lookupMapEntry(*MapEntry[K, V] entries, int capacity, K key) *MapEntry[K, V]
  u32 hashState = 0
  hash(key, hashState)
  int i = int(hashState & u32(capacity - 1))
  while entries[i].hasValue && key != entries[i].key
    i = ((i + 1) & (capacity - 1))
  ret &entries[i]

impl index(&Map[K, V] map, K key) *V
  if map.len * 5 >= map.capacity * 4
    int newCapacity = max(map.capacity * 2, 8)
    *MapEntry[K, V] newEntries = alloc(newCapacity) 
    for i in 0:map.capacity
      if map.entries[i].hasValue
        lookupMapEntry(newEntries, newCapacity, map.entries[i].key)[0] = map.entries[i]
    map.entries = newEntries
    map.capacity = newCapacity

  *MapEntry[K, V] entry = lookupMapEntry(map.entries, map.capacity, key)
  entry[0].key = key
  ret &entry[0].val

impl verifyIndex(&Map[K, V] map, *V value)
  *MapEntry[K, V] entry = ptr(value)
  if !entry[0].hasValue
    entry[0].hasValue = true
    entry[0].val = value[0]
    map.len += 1

impl format(&Fmt f, Map[K, V] map)
  f ++= '['
  for i in 0:map.capacity
    if map.entries[i].hasValue
      f ++= "("
      f ++= map.entries[i].key
      f ++= " = "
      f ++= map.entries[i].val
      f ++= "), "
  if map.len > 0; f.len -= 2
  f ++= ']'

fn has(Map[K, V] map, K key) bool
  if map.len == 0; ret false
  *MapEntry[K, V] entry = lookupMapEntry(map.entries, map.capacity, key)
  ret entry[0].hasValue

fn rand(int start, int end) int
  int output = 0
  include
    _output = (_end - _start) * ((double)rand() / (double)RAND_MAX) + _start;
  ret output

fn rand() f64
  f64 output = 0.0
  include
    _output = ((double)rand() / (double)RAND_MAX);
  ret 0.0

fn parse(str input, &int i) u64|err
  int startingI = i
  while i < input.len
    if input[i] < '0' || input[i] > '9'; break
    i += 1
  
  if i == startingI; ret err("no value")

  u64 radix = 1
  u64 prevOutput = 0
  u64 output = 0
  for i in rev(startingI:i)
    output += radix * u64(input[i] - '0')
    radix = radix * 10
    if output < prevOutput; ret err("overflow")
    prevOutput = output

  ret output

fn parse(str input, &int i) u32|err
  u64 output = try parse(input, i)
  if output >= u64(MAX_U32); ret err("overflow")
  ret u32(output)

fn parse(str input, &int i) u16|err
  u64 output = try parse(input, i)
  if output >= u64(MAX_U16); ret err("overflow")
  ret u16(output)

fn parse(str input, &int i) u8|err
  u64 output = try parse(input, i)
  if output >= u64(MAX_U8); ret err("overflow")
  ret u8(output)

fn parse(str input, &int i) i64|err
  bool negative = false
  if i < input.len && input[i] == '-'
    negative = true
    i += 1
    
  int startingI = i
  while i < input.len
    if input[i] < '0' || input[i] > '9'; break
    i += 1
  
  if i == startingI; ret err("no value")

  i64 radix = 1
  i64 prevOutput = 0
  i64 output = 0
  for i in rev(startingI:i)
    output += radix * i64(input[i] - '0')
    radix = radix * 10
    if output < prevOutput; ret err("overflow")
    prevOutput = output

  if negative == true
    ret output * -1
  ret output

fn parse(str input, &int i) int|err
  i64 output = try parse(input, i)
  if output >= i64(MAX_INT); ret err("overflow")
  if output <= i64(MIN_INT); ret err("underflow")
  ret int(output)

fn parse(str input, &int i) i16|err
  i64 output = try parse(input, i)
  if output >= i64(MAX_I16); ret err("overflow")
  if output <= i64(MIN_I16); ret err("underflow")
  ret i16(output)

fn parse(str input, &int i) i8|err
  i64 output = try parse(input, i)
  if output >= i64(MAX_I8); ret err("overflow")
  if output <= i64(MIN_I8); ret err("underflow")
  ret i8(output)

fn parse(str input, &int i) f64|err
  i64 first = try parse(input, i)
  if i >= input.len || input[i] != '.'; ret f64(first)
  i += 1 # discard '.'

  int saveI = i

  f64 divBy = 1
  u64 second = try parse(input, i)
  for j in 0:(i - saveI)
    divBy = divBy * 10
  
  if first < 0; ret f64(first) - f64(second) / divBy
  ret f64(first) + f64(second) / divBy

fn parse(str input, &int i) f32|err
  f64 output = try parse(input, i)
  ret f32(output)

fn parse(str input) bool|err
  if input == "true"
    ret true
  elif input == "false"
    ret false
  ret err("unknown value")

struct Thread
  pthread_t id

pri struct ThreadStartArgs[T]
  T args
  fn(T) start
  BumpAlloc bp

fn startThread(fn(T) start, T args) Thread|err
  pthread_t id = {}

  BumpAlloc newBp = {}
  *ThreadStartArgs[T] argsLoc = malloc(1)
  realloc(args, newBp)

  argsLoc[0] = {
    args, start, bp = newBp
  }

  fn(*ThreadStartArgs[T]) => *u8 ts = threadStart # to keep generics 
  int result = pthread_create(&id, nil, ptr(ts), ptr(argsLoc))
  if result < 0; ret err("could not create thread")
  ret { id }

pri fn threadStart(*ThreadStartArgs[T] args) *u8
  bp = args[0].bp
  *u8 startLoc = ptr(args[0].start)
  args[0].start(args[0].args)
  ret nil

fn join(Thread thread)
  *u8 retVal = nil
  int result = pthread_join(thread.id, &retVal)

struct ProgramArgs
  Arr[str] argv
  int position

fn programArgs(int argc, **char argv) ProgramArgs
  Arr[str] args = []
  for i in 0:argc
    append(args, str(argv[i]))
  ret { argv = args, position = 1 }

fn optional(&ProgramArgs args, str name, str shortName) int|nil
  str|nil o = optional(args, name, shortName)
  if o is nil; ret nil
  int|err i = parse(o, 0)
  if i is err; ret nil
  ret i

fn optional(&ProgramArgs args, str name, str shortName) str|nil
  for i in 1:args.argv.len - 1
    if args.argv[i] == name || args.argv[i] == shortName
      if i == args.argv.len - 1; ret nil
      ret args.argv[i + 1]

fn flag(&ProgramArgs args, str name, str shortName) bool
  for i in 1:args.argv.len 
    if args.argv[i] == name || args.argv[i] == shortName
      ret true
  ret false

fn positional(&ProgramArgs args) str|nil
  while args.position < args.argv.len && startsWith(args.argv[args.position], "-")
    args.position += 2
  if args.position >= args.argv.len; ret nil
  ret args.argv[args.position]

decl cmp(T a, T b) int

impl cmp(i64 a, i64 b) int
  ret int(a - b)

impl cmp(int a, int b) int
  ret a - b

impl cmp(i16 a, i16 b) int
  ret int(a - b)

impl cmp(i8 a, i8 b) int
  ret int(a - b)

impl cmp(u64 a, u64 b) int
  if a < b; ret -1
  elif a == b; ret 0
  else a > b; ret 1

impl cmp(u32 a, u32 b) int
  if a < b; ret -1
  elif a == b; ret 0
  else a > b; ret 1

impl cmp(u16 a, u16 b) int
  if a < b; ret -1
  elif a == b; ret 0
  else a > b; ret 1

impl cmp(u8 a, u8 b) int
  if a < b; ret -1
  elif a == b; ret 0
  else a > b; ret 1

impl cmp(f64 a, f64 b) int
  ret int(a - b)

impl cmp(f32 a, f32 b) int
  ret int(a - b)

fn min(T a, T b) T
  if b < a; ret b
  ret a

fn min(T a, T b, T c) T
  T min = a
  if b < min; min = b 
  if c < min; min = c 
  ret min

fn min(T a, T b, T c, T d) T
  T min = a
  if b < min; min = b 
  if c < min; min = c 
  if d < min; min = d 
  ret min

fn max(T a, T b) T
  if b > a; ret b
  ret a

fn max(T a, T b, T c) T
  T max = a
  if b > max; max = b 
  if c > max; max = c 
  ret max

fn max(T a, T b, T c, T d) T
  T max = a
  if b > max; max = b 
  if c > max; max = c 
  if d > max; max = d 
  ret max

fn abs(i64 a) i64
  if a < 0; ret a * -1
  ret a

fn abs(int a) int
  if a < 0; ret a * -1
  ret a

fn abs(i16 a) i16
  if a < 0; ret a * -1
  ret a

fn abs(i8 a) i8
  if a < 0; ret a * -1
  ret a

fn abs(f32 a) f32
  if a < 0; ret a * -1
  ret a

fn abs(f64 a) f64
  if a < 0; ret a * -1
  ret a

