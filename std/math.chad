use "include/math.h" as math

const f64 E = 2.71828
const f64 PI = 3.14159

fn acos(f64 x) f64
  ret math::acos(x)

fn acos(f32 x) f32
  ret math::acosf(x)

fn asin(f64 x) f64
  ret math::asin(x)

fn asin(f32 x) f32
  ret math::asinf(x)

fn atan(f64 x) f64
  ret math::atan(x)

fn atan(f32 x) f32
  ret math::atanf(x)

fn atan2(f64 y, f64 x) f64
  ret math::atan2(y, x)

fn atan2(f32 y, f32 x) f32
  ret math::atan2f(y, x)

fn cos(f64 x) f64
  ret math::cos(x)

fn cos(f32 x) f32
  ret math::cosf(x)

fn cosh(f64 x) f64
  ret math::cosh(x)

fn cosh(f32 x) f32
  ret math::coshf(x)

fn sin(f64 x) f64
  ret math::sin(x)

fn sin(f32 x) f32
  ret math::sinf(x)

fn sinh(f64 x) f64
  ret math::sinh(x)

fn sinh(f32 x) f32
  ret math::sinhf(x)

fn tan(f64 x) f64
  ret math::tan(x)

fn tan(f32 x) f32
  ret math::tanf(x)

fn tanh(f64 x) f64
  ret math::tanh(x)

fn tanh(f32 x) f32
  ret math::tanhf(x)

fn exp(f64 x) f64
  ret math::exp(x)

fn exp(f32 x) f32
  ret math::expf(x)

fn frexp(f64 x, &int exponent) f64
  ret math::frexp(x, &exponent)

fn ldexpr(f64 x, int exponent) f64
  ret math::ldexp(x, exponent)

fn log(f64 x) f64
  ret math::log(x)

fn log(f32 x) f32
  ret math::logf(x)

fn log10(f64 x) f64
  ret math::log10(x)

fn log10(f32 x) f32
  ret math::log10f(x)

fn pow(f64 x, f64 y) f64
  ret math::pow(x, y)

fn pow(f32 x, f32 y) f32
  ret math::powf(x, y)

fn sqrt(f64 x) f64
  ret math::sqrt(x)

fn sqrtf(f32 x) f32
  ret math::sqrtf(x)

fn ceil(f64 x) f64
  ret math::ceil(x) 

fn ceil(f32 x) f32
  ret math::ceilf(x) 

fn abs(f64 x) f64
  ret math::fabs(x)

fn abs(f32 x) f32
  ret math::fabsf(x)

fn floor(f64 x) f64
  ret math::floor(x)

fn floor(f32 x) f32
  ret math::floorf(x)

fn mod(f64 x, f64 y) f64
  ret math::fmod(x, y)

fn mod(f32 x, f32 y) f32
  ret math::fmodf(x, y)

fn round(f64 x) f64
  ret math::round(x)

fn round(f32 x) f32
  ret math::roundf(x)
