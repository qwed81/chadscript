pri fn uv_err(int code) err
  Fmt errMessage = fmt(1024)
  C.uv_err_name_r(code, errMessage.base, 1024)
  return err(str(errMessage))

fn mkDir(str srcPath) nil|err
  return err("not implemented")

fn fsCp(str srcPath, str destPath) nil|err
  return err("not implemented")

fn fsMv(str srcPath, str destPath) nil|err
  return err("not implemented")

fn fsRm(str srcPath) nil|err
  return err("not implemented")

enum FileFlags
  void Read
  void ReadWrite

struct File
  int handle
  bool alreadyClosed

fn drop(&File file)
  close(file)

fn open(str path, FileFlags flags, bool createIfMissing=false) File|err
  int fileHandle = -1
  int intFlags = 0

  int r = C.S_IRUSR
  int w = C.S_IWUSR
  int intMode = or(r, w)
  int intFlags = 0

  if flags is Read
    intFlags = C.UV_FS_O_RDONLY
  elif flags is ReadWrite
    intFlags = C.UV_FS_O_RDWR

  if createIfMissing
    int create = C.UV_FS_O_CREAT
    intFlags = or(intFlags, create)

  ptr[char] cPath = cstr(path)
  fileHandle = C.openFile(cPath, intFlags, intMode)
  if fileHandle < 0
    return uv_err(fileHandle)

  return { handle = fileHandle, alreadyClosed = false }

fn close(&File file)
  if file.alreadyClosed
    return
  C.closeFile(file.handle)
  file.alreadyClosed = false

fn read(&File file, &Arr[byte] buf, int position=-1) int|err amtRead
  int result = C.readFile(file.handle, buf.base, buf.len, position)
  if result < 0
    return uv_err(result)
  return result

fn write(&File file, Arr[byte] bytes, int position=-1) nil|err
  int result = C.writeFile(file.handle, bytes.base, bytes.len, position)
  if result < 0
    return uv_err(result)

enum DirEntryType
  void File
  void Dir
  void Other

struct DirEntry
  get DirEntryType type
  get str name

fn readDir(str path) Arr[DirEntry]|err
  int numEntries = 0
  int result = 0
  include
    ReadDirResult dirResult = readDir(_path->_base);
    _numEntries = dirResult.len;
    _result = dirResult.result;
  if result < 0 && result != -4095 # EOF
    return uv_err(result)

  Arr[DirEntry] entries = arr(numEntries) 
  for i in 0:numEntries
    int index = i
    int strLen
    include
      const char* filePath = dirResult.files[_index].name;
      _strLen = strlen(filePath);

    Fmt name = fmt(strLen)
    DirEntryType fileType = File
    include
      // copy the path into name
      memcpy(_name._base, filePath, _strLen);

      // set the fileType
      if (dirResult.files[_index].type == UV_DIRENT_FILE) {
        _fileType.tag = 0;
      }
      else if (dirResult.files[_index].type == UV_DIRENT_DIR) {
        _fileType.tag = 1;
      }
      else {
        _fileType.tag = 2;
      }

    entries[i] = { type = fileType, name = str(name) }

  return entries
