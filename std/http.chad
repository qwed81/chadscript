use "std/net"

##
struct Routes
  Arr[HttpResponse!(HttpRequest)] handlers
  Arr[str] paths

fn routes() Routes 
  return { handlers = [], paths = [] }

fn addRoute(ln Routes routes, str path, HttpResponse!(HttpRequest) handler) 
  routes.handlers += handler
  routes.paths += path

fn httpEntry(ln TcpSocket socket, Routes routes) void!
  Scanner[TcpSocket] reqScanner = scanner(socket)

  str firstLine = try nextLine(reqScanner)
  Arr[str] splits = split(firstLine)
  if splits.len < 3
    return Err("malformed request")

  HttpMethod method = GET
  if eq(splits[0], "POST")
    method = POST
  elif !eq(splits[0], "GET")
    return Err("unsupported method")

  HttpRequest req = { method = method, route = splits[1] }
  HttpResponse res = { status = NOT_FOUND, contentType = Html, body = "not found" }
  for i in 0:routes.paths.len
    if eq(routes.paths[i], req.route)
      HttpResponse! resultRes = routes.handlers[i](req)
      if resultRes is Ok 
        res = resultRes
      else
        res = { status = INTERNAL_SERVER_ERROR, contentType = Html, body = "internal server error"}

  Fmt responseStr = fmt()
  if res.status is OK
    responseStr += "HTTP/1.1 200 OK\n"
  elif res.status is NOT_FOUND
    responseStr += "HTTP/1.1 404 NOT FOUND\n"
  else
    responseStr += "HTTP/1.1 500 Internal Server Error\n"

  responseStr += "Content-Type: text/html; charset=UTF-8\n"
  responseStr += "Content-Length: {res.body.len}\n\n"
  responseStr += res.body
  try write(socket, toUtf8(responseStr))

  return Ok

fn httpListen(str host, int port, Routes routes) void!
  return listen(host, port, routes, httpEntry)

enum HttpMethod
  void GET
  void POST

enum HttpStatusCode
  void OK
  void NOT_FOUND
  void INTERNAL_SERVER_ERROR 

enum HttpContentType
  void Html
  void Json

struct HttpResponse
  get HttpStatusCode status
  get HttpContentType contentType
  get str body

struct HttpRequest
  get str route
  get HttpMethod method

##
