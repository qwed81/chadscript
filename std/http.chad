use "std/io"

struct HttpRes
  int code
  str body
  Vec[HttpHeader] headers

struct HttpHeader
  str key
  str value

struct HttpReq
  str method
  str version
  str path
  str body
  Vec[HttpHeader] headers

fn readReq(Tcp tcp) HttpReq|err
  Vec[u8] buf = vec(1024)
  int amtRead = try read(tcp, buf)
  str req = { base = ptr(buf.base), len = amtRead }

  Vec[str] reqLines = lines(req)
  if reqLines.len == 0; ret err("malformed request")

  Vec[str] firstLine = split(reqLines[0])
  if firstLine.len < 3; ret err("malformed request")

  HttpReq output = {}
  output.method = firstLine[0]
  output.path = firstLine[1]
  output.version = firstLine[2]

  int bodyStart = 0
  for i in 0:reqLines.len
    str line = reqLines[i]
    if line.len == 0
      bodyStart += 2
      break
    bodyStart += line.len
    int|nil headerDivider = indexOf(line, ':')
    if headerDivider is nil; ret err("malformed request")
    HttpHeader header = { key = line[0:headerDivider], value = line[headerDivider + 1:line.len] }
    append(output.headers, header)

  output.body = req[bodyStart:req.len]
  ret output

fn writeRes(Tcp tcp, HttpRes res) nil|err

