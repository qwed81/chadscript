use "std/net", "sqlite3.h" as db

fn main(&Args args) nil|err
  bool multiThread = parseArg(args, "--multi-thread")
  try finalize(args)

  TcpServer server = try bind("127.0.0.1", 8000)
  while true
    tcp|err socket = accept(server)
    if socket is err
      continue

    if multiThread
      startThread(handleConnection, socket)
    else
      try handleConnection(socket) else nil

fn handleConnection(tcp socket) nil|err
  defer close(socket)

  clear(zone)
  Fmt reqStr = fmt()
  try readAll(socket, reqStr)
  httpReq req = try parseRequest(httpReq.str)
  httpRes res = handleRequest(req)
  try write(socket, reqToStr)

struct httpReq
  str route
  str method
  str body

enum httpContentType
  Html
  Json

struct httpRes
  httpContentType contentType
  int code
  str body

const int OK = 200
const int NOT_FOUND = 404

fn parseRequest(str input) httpReq|err
  ret ""

fn responseToStr(httpRes res) str
  ret ""

struct person
  str name
  int age
  int personId
  int parentId

fn handleRequest(httpReq req) httpRes
  if req.path == "index"
    ret {
      contentType = Html,
      body = "<h1>Hello World!</h1>"
      code = OK
    }
  elif req.path == "/john-son" && req.method == "get"
    str getPeople = "
      SELECT * FROM people
      JOIN people
      WHERE people.parentId = 
    "

    Vec[person] people = query(getPeople)
    ret {
      contentType = Json,
      body = json(people),
      code = OK
    }
  elif req.path == "" && req.method == ""

  ret {
    contentType = Html,
    body = "<h1>Not Found</h1>",
    code = NOT_FOUND
  }

# converts arbitrary structures with no more specific
# implementation in to json
impl trait json(T input, &Fmt output)
  int fieldAmt = input._fields.len
  int|nil tag = input._tag
  if tag is int
    json(input._fields[tag], output)
    ret

  for i in 0:fieldAmt
    K field = input._fields[i]
    str name = input.fields[i]._name
    output ++= "\{\"{name}\": "
    json(field, output)
    output ++= '}'

impl json(Vec[T] input, &Fmt output)
  output ++= '['
  for int i in 0:input.len
    json(input[i], output)
    if i != input.len - 1
      output ++= ','
  output ++= ']'

# using FFI
fn queryPerson(str s) person|err
