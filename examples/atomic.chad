use "std/core.chad", thread.h" as cthread

struct atomicList[T]
  cthread::mtx_t mutex
  T* base
  int len
  int capacity

fn atomicList() atomicList[T]|err
  cthread::mtx_t mutex = nil
  int result = cthread::mtx_init(&mutex, cthread::mtx_plain)
  if result < 0
    ret err("could not init mutex")

  T* base = malloc(4)
  ret { mutex = mutex, base = base, len = 0, capacity = 4 }

impl areaMove(atoimcList[T] list, area to) atomicList[T]
  atomicList[T]* thisPtr = alloc(to, 1)
  thisPtr[0] = list

impl getIndex(&atomicList[T] list, int index) T*
 
impl setIndex(&atomicList[T] list, int index) T*

impl append(&atomicList[T] list, T item) 

