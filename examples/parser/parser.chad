enum binaryOperator
  Add
  Sub

struct binaryExpr
  expr left
  expr right
  binaryOperator op

enum expr
  int IntConst
  recur binaryExpr Binary

impl format(&Fmt output, expr e)
  if e is IntConst
    output ++= e.IntConst
  elif e is Binary 
    writeStr(e.Binary.left, output)
    if e.Binary.op is Add
      output ++= '+'
    elif e.Binary.op is Sub
      output ++= '-'
    writeStr(e.Binary.right, output)

fn parseExpr(str strExpr) expr|err
  strExpr = trim(strExpr)
  Vec[char] ops = ['+', '-']
  for i in 0:ops.len
    if has(strExpr, ops[i])
      Vec[str] splits = split(strExpr, ops[i]) 
      if splits.len < 2
        ret err("expected operand")
      expr e1 = try parseExpr(splits[0])
      expr e2 = try parseExpr(splits[1])
      binaryOperator thisOp = Add
      if ops[i] == '-'
        thisOp = Sub
      ret Binary({ left = e1, right = e1, op = thisOpo })

  int intConst = try int(strExpr)
  ret IntConst(intConst)

fn main() nil|err
  while true 
    clear(zone)
    str strExpr = input("expr: ")
    expr|err e = parseExpr(strExpr)
    if e is err
      print("err: {e.message}")
      continue
    print(e)
