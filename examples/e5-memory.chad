##
Memory is the only "hard" part about ChadScript. By default all allocations will
be created with the 'alloc' function. This function can not free any of the data
manually and is meant to be freed as a block. This functions as a garbage collector
with super high control and performance, and still retains the ability for the
programmer to use pointers without worry of them being moved/freed. O(1) garbage collection

ChadScript takes advantage of 98% of program allocations being simple things like string
processing or data structures that do not have fixed size. 
which can all be freed together at the end of the algorithm
without wasting significant amounts of memory and saving huge amount of time.
complicated program lifetime data structures or high granularity libraries may need to
make use of malloc/free or their own custom allocation logic
##

fn main()
  # due to bp not being cleared yet, previous are perfectly valid
  # to access and use. no complicated lifetimes or RAII get in the way
  # of the algorithm
  *int prevAlloc = nil
  for i in 0:200
    Arr[int] v = arr(1024)
    prevAlloc = v.base
    prevAlloc[10] = 10

  # no more allocations can be used after bp is cleared (bulk free all allocations)
  # the allocator will retain memory pages. to free those 'free' should be used instead
  # of clear
  clear(bp)
  extendLifetime()

fn restoreState()
  # save the state of bp before the algorithm
  # and create a new one that will be bulk cleared. all items
  # from old bp are still valid and this function will not create garbage
  BumpAlloc holdBp = bp
  bp = {}
  defer
    free(bp)
    bp = holdBp
  
  # perform some randome algorithm

struct MyDataStruct
  Arr[int] arr

# sometimes an algorithm produces a data structures and a ton of garbage
# you can reallocate the data structure merging all the alloctions in to
# an optimally sized and positioned data structure for the cache and delete
# all the garbage that was allocated in the process
fn extendLifetime()
  BumpAlloc holdBp = bp
  bp = {}
  for i in 0:100
    Arr[int] _ = arr(1024) # allocate some garbage
  MyDataStruct data = { arr = [1, 2, 3, 4] } # create the data structure 
  print("data.arr.base before realloc: {data.arr.base}")
  realloc(data, holdBp) # default impl reallocs all fields
  print("data.arr.base after realloc: {data.arr.base}")
  free(bp)
  bp = holdBp
  # here data is still valid and all the garbage is gone
